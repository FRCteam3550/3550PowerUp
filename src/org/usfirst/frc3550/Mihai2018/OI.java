// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3550.Mihai2018;

import org.usfirst.frc3550.Mihai2018.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	
	
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    
    

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private Joystick joystickLeft = new Joystick(0);
	private Joystick joystickRight = new Joystick(1);
	
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	
    	Button button1 = new JoystickButton (joystickRight, 1);
    	button1.whileHeld(new PickupCubeCommand());
    	
    	Button button2 = new JoystickButton (joystickRight, 2);
    	button2.whileHeld(new DropCubeCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS



    public Joystick getLeftStick() {
    	return joystickLeft;
    }
    
    public double getRightStickL() {
    	return joystickLeft.getY();
    }
    
    public double getRightStickR() {
    	return joystickRight.getY();
    }
    
    public double getfilteredJPiloteXAxis() {
    	//return filterJoystickAxis(jPilote.getRawAxis(0));
    	return filterJoystickXAxis(joystickLeft.getRawAxis(2));
    }
    public double getfilteredJPiloteYAxis() {
    	return filterJoystickYAxis(joystickRight.getRawAxis(1));
    }
    

    public Joystick getcoPilote() {
        return joystickRight;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  }
    public double filterJoystickYAxis(double inputAxis){
    	if ((inputAxis < -0.10)||(inputAxis > 0.1)){
    	//if ((Math.abs(inputAxis) < 0.1)){
    		return inputAxis;
    	}
    	else {
    		return 0.0;
    	}
    }
        public double filterJoystickXAxis(double inputAxis){
        	if ((inputAxis < -0.3)||(inputAxis > 0.4)){
        	//if ((Math.abs(inputAxis) < 0.2)){
        		return inputAxis;
        	}
        	else {
        		return 0.0;
        	}
    }

}

